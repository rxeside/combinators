'use strict';

var authDataService = require('./authDataService.js');
var types = require('../core/config/types.js');
var domain = require('../utils/domain.js');
var url = require('../utils/url.js');
var uuid = require('../utils/uuid.js');
var constants = require('./constants.js');

function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var Auth = /*#__PURE__*/ function() {
    function Auth() {
        var _this = this;
        _class_call_check(this, Auth);
        _define_property(this, "uuid", void 0);
        _define_property(this, "dataService", void 0);
        _define_property(this, "opener", void 0);
        _define_property(this, "interval", void 0);
        _define_property(this, "close", function() {
            _this.opener && _this.opener.close();
        });
        _define_property(this, "handleMessage", function(param) {
            var origin = param.origin, source = param.source, data = param.data;
            if (source !== _this.opener || !_this.opener || !domain.isDomainAllowed(origin)) {
                return;
            }
            _this.unsubscribe();
            if (data.payload.error) {
                _this.dataService.sendAuthorizationFailed(data.payload.error);
                return;
            }
            if (data.action === constants.AUTH_VK_CONNECT_RESPONSE + _this.uuid) {
                _this.dataService.sendSuccessData(data.payload);
                return;
            }
            _this.dataService.sendEventNotSupported();
        });
        _define_property(this, "handleInterval", function() {
            var _this_opener;
            if ((_this_opener = _this.opener) === null || _this_opener === void 0 ? void 0 : _this_opener.closed) {
                _this.unsubscribe();
                _this.dataService.sendNewTabHasBeenClosed();
            }
        });
        _define_property(this, "subscribe", function() {
            _this.interval = window.setInterval(_this.handleInterval, 1000);
            window.addEventListener("message", _this.handleMessage);
            _this.dataService.removeCallback();
        });
        _define_property(this, "unsubscribe", function() {
            window.removeEventListener("message", _this.handleMessage);
            clearInterval(_this.interval);
            _this.dataService.setCallback(_this.close);
        });
        _define_property(this, "loginInNewTab", function(url) {
            _this.dataService = new authDataService.AuthDataService();
            _this.opener = window.open(url, "_blank");
            if (_this.opener) {
                _this.subscribe();
            } else {
                _this.dataService.sendCannotCreateNewTab();
            }
            _this.dataService.value.then(function(payload) {
                _this.redirectWithPayload(payload);
            }).catch(console.error);
        });
        _define_property(this, "loginByRedirect", function(url) {
            location.assign(url);
        });
        _define_property(this, "login", function(params) {
            var _params, _params1, _params2, _params3;
            var config = Auth.__config.get();
            _this.uuid = uuid.uuid();
            var queryParams = {
                uuid: _this.uuid,
                lang_id: (_params = params) === null || _params === void 0 ? void 0 : _params.lang,
                scheme: (_params1 = params) === null || _params1 === void 0 ? void 0 : _params1.scheme,
                screen: (_params2 = params) === null || _params2 === void 0 ? void 0 : _params2.screen,
                response_type: constants.AUTH_RESPONSE_TOKEN,
                action: ((_params3 = params) === null || _params3 === void 0 ? void 0 : _params3.action) ? btoa(JSON.stringify(params.action)) : undefined
            };
            var getUrl = function() {
                return url.getVKIDUrl("auth", queryParams, config);
            };
            if (config.mode === types.ConfigAuthMode.InNewTab) {
                queryParams.origin = location.protocol + "//" + location.hostname;
                _this.loginInNewTab(getUrl());
            } else {
                _this.loginByRedirect(getUrl());
            }
        });
    }
    _create_class(Auth, [
        {
            key: "redirectWithPayload",
            value: // TODO: добавить типы
            function redirectWithPayload(payload) {
                location.assign(url.getRedirectWithPayloadUrl(payload, Auth.__config));
            }
        }
    ]);
    return Auth;
}();
/**
   * @ignore
   */ _define_property(Auth, "__config", void 0);

exports.Auth = Auth;
